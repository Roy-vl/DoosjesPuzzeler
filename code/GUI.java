
import java.awt.Color;
import java.awt.FileDialog;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.WindowConstants;

public class GUI extends javax.swing.JFrame {
    
    ProblemStatement PS = null;
    PackerStrategy strategy = new AutoSelectPack();

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        
        //Initialize Systemout Dump
        MessageConsole mc = new MessageConsole(SystemOut);
        mc.redirectOut(Color.green, System.out);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Doos = new javax.swing.JInternalFrame();
        jScrollPane1 = new javax.swing.JScrollPane();
        SystemOut = new javax.swing.JTextArea();
        NewWindow = new javax.swing.JCheckBox();
        AlgoSelector = new javax.swing.JComboBox<>();
        PackButton = new javax.swing.JButton();
        EvaluateButton = new javax.swing.JButton();
        fileChooser = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setIconImages(null);

        Doos.setPreferredSize(new java.awt.Dimension(800, 800));
        Doos.setVisible(true);
        Doos.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                DoosComponentResized(evt);
            }
        });

        javax.swing.GroupLayout DoosLayout = new javax.swing.GroupLayout(Doos.getContentPane());
        Doos.getContentPane().setLayout(DoosLayout);
        DoosLayout.setHorizontalGroup(
            DoosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 798, Short.MAX_VALUE)
        );
        DoosLayout.setVerticalGroup(
            DoosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        SystemOut.setColumns(20);
        SystemOut.setRows(5);
        jScrollPane1.setViewportView(SystemOut);

        NewWindow.setText("Open in New window");

        AlgoSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AutoSelect", "BackTrackCorner", "GreedyCorner", "GreedyTrivial", "MultipleGreedyCorner" }));
        AlgoSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AlgoSelectorActionPerformed(evt);
            }
        });

        PackButton.setText("Pack");
        PackButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PackButtonMouseClicked(evt);
            }
        });

        EvaluateButton.setText("Evaluate");
        EvaluateButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                EvaluateButtonMouseClicked(evt);
            }
        });

        fileChooser.setText("Choose file");
        fileChooser.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fileChooserMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Doos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AlgoSelector, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fileChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(PackButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(EvaluateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 19, Short.MAX_VALUE))
                    .addComponent(NewWindow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fileChooser)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AlgoSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(NewWindow)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(EvaluateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(338, 338, 338)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(Doos, javax.swing.GroupLayout.DEFAULT_SIZE, 996, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DoosComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_DoosComponentResized

    }//GEN-LAST:event_DoosComponentResized

    private void AlgoSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AlgoSelectorActionPerformed

        switch(AlgoSelector.getSelectedItem().toString()){
            case "AutoSelect" :
                strategy = new AutoSelectPack();
                break;
            case "BackTrackCorner" :
                strategy = new BacktrackCornerPack();
                break;
            case "GreedyCorner" :
                strategy = new GreedyCornerPack();
                break;
            case "MultipleGreedyCorner" :
                strategy = new MultipleGreedyCornerPack();
                break;
            case "GreedyTrivial":
                strategy = new GreedyTrivialPack();
                break;
            default:
                strategy = null;
        }
    }//GEN-LAST:event_AlgoSelectorActionPerformed

    private void PackButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PackButtonMouseClicked
        if(PS==null){
            System.out.println("No problem selected");
            return;
        }
        if(strategy==null){
            System.out.println("No strategy selected");
            return;
        }
        
        long startTime = System.currentTimeMillis();
        RectanglesContainer packedRC = strategy.pack(PS);
        long estimatedTime = System.currentTimeMillis() - startTime;  

        System.out.println("Packing time : " + estimatedTime + "ms");
        
        visualize(packedRC);
        Doos.repaint();
    }//GEN-LAST:event_PackButtonMouseClicked

    private void EvaluateButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EvaluateButtonMouseClicked

        if(PS==null){
            System.out.println("No PS selected");
            return;
        }
        if(strategy==null){
            System.out.println("No strategy selected");
            return;
        }
        if(strategy instanceof AutoSelectPack){
            System.out.println("Evaluation should not be run with AutoSelect");
            return;
        }
        
        float ct = 0;
        float cfr = 0;
        int tries = 10;
        for(int i=0;i<tries;i++){
            long startTime = System.currentTimeMillis();
            RectanglesContainer packedRC = strategy.pack(PS);
            long estimatedTime = System.currentTimeMillis() - startTime;
            ct += estimatedTime;
            cfr += (float)(packedRC.getRectanglesArea())/packedRC.getBoundingArea();
        }
        
        System.out.println("Average time(ms) of "+tries+" runs: "+ct/tries);
        System.out.println("Filling ratio of :"+cfr/tries);
    }//GEN-LAST:event_EvaluateButtonMouseClicked

    private void fileChooserMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fileChooserMouseClicked
 
        FileDialog dialog = new FileDialog((Frame) null, "Select File to Open");
        dialog.setMultipleMode(true);
        dialog.setMode(FileDialog.LOAD);
        dialog.setVisible(true);
        File[] files = dialog.getFiles();
        if (files != null && files.length > 0) {
            for (File file : files) { 
                try {
                    fileChooser.setText(file.getName());
                    PS = new ProblemStatement();
                    PS.parseInput(new Scanner(file));
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                }        
            }
        } else {
            fileChooser.setText("Choose problem");
            PS = null;
        }

    }//GEN-LAST:event_fileChooserMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> AlgoSelector;
    private javax.swing.JInternalFrame Doos;
    private javax.swing.JButton EvaluateButton;
    private javax.swing.JCheckBox NewWindow;
    private javax.swing.JButton PackButton;
    private javax.swing.JTextArea SystemOut;
    private javax.swing.JButton fileChooser;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    public void visualize(RectanglesContainer packedRC) {

        int windowSizeX = 700;
        int windowSizeY = 700;

        int maxx = packedRC.getBoundingWidth();
        int maxy = packedRC.getBoundingHeight();

        if (maxx == 0 || maxy == 0) {
            return;
        }

        float scale = maxx >= maxy ? (float) windowSizeX / maxx : (float) windowSizeY / maxy;

        //create an image and its graphics 
        BufferedImage image = packedRC.visualize();

        //create window
        JFrame Doos2 = new JFrame();
        Doos.setTitle("  Bounding Dimensions : " + packedRC.getBoundingWidth() + "," + packedRC.getBoundingHeight()
                + ", Bounding Area : " + packedRC.getBoundingArea()
                + ", Rectangles Area :" + packedRC.getRectanglesArea()
                + ", Cost : " + packedRC.getCost());

        Doos.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        Doos.setSize(windowSizeX + 16, windowSizeY + 39);//+16,+40 for windows bullshit

        JPanel paintBox = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                g.drawImage(image, 0, 0, (int) (maxx * scale), (int) (maxy * scale), 0, 0, maxx, maxy, null);
            }
        };
        Doos2.getContentPane().add(paintBox);
        if (NewWindow.isSelected()) {
            Doos2.setSize(windowSizeX + 16, windowSizeY + 39);//+16,+40 for windows bullshit
            Doos2.setTitle("  Bounding Dimensions : " + packedRC.getBoundingWidth() + "," + packedRC.getBoundingHeight()
                + ", Bounding Area : " + packedRC.getBoundingArea()
                + ", Rectangles Area :" + packedRC.getRectanglesArea()
                + ", Cost : " + packedRC.getCost());
            Doos2.setVisible(true);
        } else {
        Doos.setContentPane(Doos2.getContentPane());
        paintBox.setVisible(true);
        }
    }
}
