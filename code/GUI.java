
import java.awt.Color;
import java.awt.FileDialog;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Random;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.WindowConstants;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author s165433
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();

        //Initialize Systemout Dump
        MessageConsole mc = new MessageConsole(SystemOut);
        mc.redirectOut(Color.green, System.out);

        //Set all algos to false
        AlgoBacktrack.setState(false);
        AlgoMultipleGreedyCorner.setState(false);
        AlgoGreedyCorner.setState(false);
        AlgoPackNext.setState(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Doos = new javax.swing.JInternalFrame();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        SystemOut = new javax.swing.JTextArea();
        AlgoOverride = new javax.swing.JCheckBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        File = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        AlgoSelector = new javax.swing.JMenu();
        AlgoBacktrack = new javax.swing.JCheckBoxMenuItem();
        AlgoGreedyCorner = new javax.swing.JCheckBoxMenuItem();
        AlgoMultipleGreedyCorner = new javax.swing.JCheckBoxMenuItem();
        AlgoPackNext = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setIconImages(null);

        Doos.setPreferredSize(new java.awt.Dimension(800, 800));
        Doos.setVisible(true);
        Doos.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                DoosComponentResized(evt);
            }
        });

        javax.swing.GroupLayout DoosLayout = new javax.swing.GroupLayout(Doos.getContentPane());
        Doos.getContentPane().setLayout(DoosLayout);
        DoosLayout.setHorizontalGroup(
            DoosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 784, Short.MAX_VALUE)
        );
        DoosLayout.setVerticalGroup(
            DoosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 764, Short.MAX_VALUE)
        );

        jButton1.setText("jButton1");

        jButton2.setText("jButton2");

        jButton3.setText("jButton3");

        jButton4.setText("jButton4");

        SystemOut.setColumns(20);
        SystemOut.setRows(5);
        jScrollPane1.setViewportView(SystemOut);

        AlgoOverride.setText("Override Alorithm Selection");

        File.setText("File");
        File.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                FileMouseClicked(evt);
            }
        });
        jMenuBar1.add(File);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        AlgoSelector.setText("Algo");

        AlgoBacktrack.setSelected(true);
        AlgoBacktrack.setText("BacktrackCornerPack");
        AlgoSelector.add(AlgoBacktrack);

        AlgoGreedyCorner.setSelected(true);
        AlgoGreedyCorner.setText("GreedyCornerPack");
        AlgoSelector.add(AlgoGreedyCorner);

        AlgoMultipleGreedyCorner.setSelected(true);
        AlgoMultipleGreedyCorner.setText("MultipleGreedyCornerPack");
        AlgoSelector.add(AlgoMultipleGreedyCorner);

        AlgoPackNext.setSelected(true);
        AlgoPackNext.setText("PackNextToEachother");
        AlgoSelector.add(AlgoPackNext);

        jMenuBar1.add(AlgoSelector);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Doos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AlgoOverride))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Doos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(AlgoOverride)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void FileMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FileMouseClicked
        getFile();
    }//GEN-LAST:event_FileMouseClicked

    private void DoosComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_DoosComponentResized

    }//GEN-LAST:event_DoosComponentResized

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBoxMenuItem AlgoBacktrack;
    private javax.swing.JCheckBoxMenuItem AlgoGreedyCorner;
    private javax.swing.JCheckBoxMenuItem AlgoMultipleGreedyCorner;
    private javax.swing.JCheckBox AlgoOverride;
    private javax.swing.JCheckBoxMenuItem AlgoPackNext;
    private javax.swing.JMenu AlgoSelector;
    private javax.swing.JInternalFrame Doos;
    private javax.swing.JMenu File;
    private javax.swing.JTextArea SystemOut;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    public void getFile() {

        ProblemStatement PS = new ProblemStatement();

        FileDialog dialog = new FileDialog((Frame) null, "Select File to Open");
        dialog.setMultipleMode(true);
        dialog.setMode(FileDialog.LOAD);
        dialog.setVisible(true);
        File[] files = dialog.getFiles();
        if (files != null && files.length > 0) {
            for (File file : files) {
                try {
                    System.out.println(file + " chosen.");
                    Scanner scanner = new Scanner(file);
                    PS.parseInput(scanner);
                    getSolution(PS);

                } catch (FileNotFoundException ex) {
                    Logger.getLogger(PackingSolver.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else {
            System.out.println("No file chosen");
        }
    }

    public void getSolution(ProblemStatement PS) {
        PackerStrategy strategy = null;
        if (AlgoOverride.isSelected()) {
            System.out.println("Algorithm Selection Overriden");
            if (AlgoBacktrack.isSelected()) {
                strategy = (new BacktrackCornerPack());
            } else if (AlgoGreedyCorner.isSelected()) {
                strategy = (new GreedyCornerPack());
            } else if (AlgoMultipleGreedyCorner.isSelected()) {
                strategy = (new MultipleGreedyCornerPack());
            } else if (AlgoPackNext.isSelected()) {
                strategy = (new PackNextToEachother());
            } else {
                System.out.println("No algorithm chosen to override");
                strategy = (new StrategyPicker()).pick(PS);
            }
        } else {
            strategy = (new StrategyPicker()).pick(PS);
        }
        System.out.println("Applying " + strategy.getClass().getSimpleName());

        long startTime = System.currentTimeMillis();
        RectanglesContainer packedRC = strategy.pack(PS);
        long estimatedTime = System.currentTimeMillis() - startTime;
        System.out.println("Packing time : " + estimatedTime + "ms");

        PS.print();
        packedRC.printPlacement(PS.getRotationAllowed());
        visualize(packedRC);
        Doos.repaint();
    }

    public void visualize(RectanglesContainer packedRC) {

        int windowSizeX = 1000;
        int windowSizeY = 1000;

        int maxx = packedRC.getBoundingWidth();
        int maxy = packedRC.getBoundingHeight();

        if (maxx == 0 || maxy == 0) {
            return;
        }

        float scale = maxx >= maxy ? (float) windowSizeX / maxx : (float) windowSizeY / maxy;

        //create an image and its graphics 
        BufferedImage image = new BufferedImage(maxx, maxy, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g = image.createGraphics();

        //black background
        g.setColor(new Color(0, 0, 0));
        g.fillRect(0, 0, maxx, maxy);

        //color rectangles
        for (Rectangle curRec : packedRC.rectangles) {
            //to get rainbow, pastel colors, that are never black
            Random random = new Random();
            final float hue = (float) (curRec.id * 1.61803398875);
            final float saturation = random.nextFloat() * .5f + .5f;//1.0 for brilliant, 0.0 for dull
            final float luminance = random.nextFloat() * .5f + .5f;; //1.0 for brighter, 0.0 for black
            final Color color = Color.getHSBColor(hue, saturation, luminance);
            g.setColor(color);
            g.fillRect(curRec.px, curRec.py, curRec.getWidth(), curRec.getHeight());
        }

        //create window
        JFrame Doos2 = new JFrame();
        Doos.setTitle("  Bounding Dimensions : " + packedRC.getBoundingWidth() + "," + packedRC.getBoundingHeight()
                + ", Bounding Area : " + packedRC.getBoundingArea()
                + ", Rectangles Area :" + packedRC.getRectanglesArea()
                + ", Cost : " + packedRC.getCost());

        Doos.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        Doos.setSize(windowSizeX + 16, windowSizeY + 39);//+16,+40 for windows bullshit

        JPanel paintBox = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                g.drawImage(image, 0, 0, (int) (maxx * scale), (int) (maxy * scale), 0, 0, maxx, maxy, null);
            }
        };
        Doos2.getContentPane().add(paintBox);
        Doos.setContentPane(Doos2.getContentPane());
        paintBox.setVisible(true);

    }
}
